abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="relative humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="relative humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
knitr::opts_chunk$set(echo = TRUE)
cbtempunc <- crossbasis(data$temperature,lag=c(0,7),
argvar=list(fun="strata",
breaks=cutoffs[2:10]),
arglag=list(fun="integer"))
knitr::opts_chunk$set(echo = TRUE)
# remove all variables to clean the environment
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
#install.packages("imputeTS")
#install.packages("splines")
#install.packages("haven")
# laod the package installed if installed already
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi) # if needed for fancy result display
library(tsModel)
library(imputeTS) # for assignment, not really neededfor this demo
library(splines)
library(haven) # needed to load Stata DTA file format below
# Get file directly from web URL,
# Download data from:    https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/blob/master/londondataset2002_2006.dta
data <- read_dta("londondataset2002_2006_bhaskaran_IJE.dta")
#write.csv(data, "londondataset2002_2006_bhaskaran_IJE.csv")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:5])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
data$numdeaths <- log(data$numdeaths)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time (Count outcome)",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="relative humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
### Plot to decompose time-series - need to conver to a data structure called "ts"
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
acf(data$ozone, main = "Autocorrelation function (ACF) of the outcome")
acf(tsDataDecomposed$random, na.action = na.pass, main = "ACF of the random compoenent after decomposition")
plot(diff(data$numdeaths, 1), main = "Outcome (death count), first order difference")
acf(diff(data$numdeaths, 1), main = "Outcome (death count), first order difference")
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model1 <- lm(numdeaths ~ ozone,data)
summary(model1)
ci.lin(model1,subset="ozone",Exp=T) %>%  round(digit = 4)
acf(residuals(model1, type = "response"), main = "ACF of Model 1, no adjustment")
plot(residuals(model1))
hist(residuals(model1))
qqplot(data$numdeaths, residuals(model1))
#####################################
# OPTION 2: PERIODIC FUNCTIONS MODEL
# (FOURIER TERMS)
#####################################
# GENERATE FOURIER TERMS
# (USE FUNCTION harmonic, IN PACKAGE tsModel TO BE INSTALLED AND THEN LOADED)
# 4 SINE-COSINE PAIRS REPRESENTING DIFFERENT HARMONICS WITH PERIOD 1 YEAR
data$time <- seq(nrow(data))
fourier <- harmonic(data$time,nfreq=4,period=365.25)
# FIT A POISSON MODEL FOURIER TERMS + LINEAR TERM FOR TREND
# (USE OF quasipoisson FAMILY FOR SCALING THE STANDARD ERRORS)
model2 <- lm(numdeaths ~ ozone + fourier + time,data)
# COMPUTE FITTED NUMBER OF DEATHS FROM THIS MODEL
pred2 <- predict(model2)
#############
# FIGURE 2B in the manuscript
#############
par(mfrow= c(2,1))
plot(data$date,data$numdeaths ,col=grey(0.6),
main="Diagnosis: Fitted sine-cosine functions (line) plus downward trend",ylab="Daily number of deaths",
xlab="Date")
plot(data$date,pred2,lwd=2)
#############
# Diagnosis of Model 2
#############
acf(residuals(model2), main = "ACF of the model that controlled for seasonality and trend")
# Formatted table, only visible in HTML output
ci.lin(model2,subset="ozone") %>%  round(digit = 4)
# (TEMPERATURE MODELLED WITH CATEGORICAL VARIABLES FOR DECILES)
# (MORE SOPHISTICATED APPROACHES ARE AVAILABLE - SEE ARMSTRONG EPIDEMIOLOGY 2006)
cutoffs <- quantile(data$temperature,probs=0:10/10)
data$tempdecile <- cut(data$temperature,breaks=cutoffs,include.lowest=TRUE)
plot(y=data$tempdecile, x = data$date, type = "l", main = "Plot of temperature level (cateogry) over time")
# CONTROLLING FOR TEMPERATURE, plus ozone and seasonality
model3 <- lm(numdeaths ~ ozone + fourier + time + tempdecile, data)
ci.lin(model3,subset="ozone") %>%  round(digit = 4)
acf(residuals(model3), main = "ACF of residual, after controlling for temperature")
summary(model3)
# IN PARTICULAR, THE FUNCTION crossbasis PRODUCES THE TRANSFORMATION FOR
#   SPECIFIC LAG STRUCTURES AND OPTIONALLY FOR NON-LINEARITY
# THE FUNCTION crosspred INSTEAD PREDICTS ESTIMATED EFFECTS
# PRODUCE THE CROSS-BASIS FOR TEMPERATURE
# AS ABOVE, BUT WITH STRATA DEFINED BY INTERNAL CUT-OFFS
cbtempunc <- crossbasis(data$temperature,lag=c(0,7),
argvar=list(fun="strata",
breaks=cutoffs[2:10]),
arglag=list(fun="integer"))
####################################
# CONSTRAINED (LAG-STRATIFIED) DLM - Distibuted Lag Model
####################################
# PRODUCE A DIFFERENT CROSS-BASIS FOR OZONE
# USE STRATA FOR LAG STRUCTURE, WITH CUT-OFFS DEFINING RIGHT-OPEN INTERVALS
cbo3constr <- crossbasis(data$ozone,lag=c(0,7),
argvar=list(fun="lin"),
arglag=list(fun="strata",breaks=c(1,3)))
model4 <- lm(numdeaths ~ cbo3constr + cbtempunc + fourier + date ,data)
# Generate (predict) lag patterns for visualization below
pred4_Ozone <- crosspred(cbo3constr,model4,at=10)
pred4_Temp <- crosspred(cbtempunc,model4,at=10)
#############
# FIGURE 4C
#############
plot(pred4_Ozone,var=10,type="p",ci="bars",col=1,pch=19,
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="Point estimate and 95%CI per 10ug/m3 ozone increase")
#############
# FIGURE 4C
#############
plot(pred4_Temp,var=10,type="p",ci="bars",col=1,pch=19,
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="Point estimate and 95%CI per 1C temperature increase")
acf(residuals(model4), na.action = na.omit)
# RUN THE MODEL AND OBTAIN PREDICTIONS FOR OZONE LEVEL 10ug/m3
data$y_lag <- NA
data$y_lag  <-  lag(data$numdeaths)
model5 <- glm(numdeaths ~ cbo3constr + cbtempunc + fourier + date + y_lag ,data,family=quasipoisson)
pred5 <- crosspred(cbo3constr,model5,at=10)
acf(residuals(model5), na.action = na.omit)
cbtempunc <- crossbasis(data$temperature,lag=c(0,7),
argvar=list(fun="strata",
breaks=cutoffs[2:10]),
arglag=list(fun="integer"))
cbo3constr <- crossbasis(data$ozone,lag=c(0,7),
argvar=list(fun="lin"),
arglag=list(fun="strata",breaks=c(1,3)))
data <- data  %>% mutate(diff_y = numdeaths - numdeaths)
model6<- lm(diff_y ~ cbo3constr + cbtempunc, data)
acf(residuals(model6), na.action = na.pass)
residuals(model6)
model6<- lm(diff_y ~ cbo3constr + cbtempunc, data)
data$diff_y
data <- data  %>% mutate(diff_y = numdeaths - lag(numdeaths))
model6<- lm(diff_y ~ cbo3constr + cbtempunc, data)
acf(residuals(model6), na.action = na.pass)
pred4_Ozone <- crosspred(cbo3constr,model4,at=10)
pred4_Temp <- crosspred(cbtempunc,model4,at=10)
plot(pred4_Temp,var=10,type="p",ci="bars",col=1,pch=19,
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="RR and 95%CI per 10ug/m3 ozone increase")
plot(pred4_Ozone,var=10,type="p",ci="bars",col=1,pch=19,
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="RR and 95%CI per 10ug/m3 ozone increase")
