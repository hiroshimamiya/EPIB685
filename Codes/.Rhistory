acf(residuals(model8), na.action = na.omit)
# PRODUCE THE CROSS-BASIS FOR TEMPERATURE
# AS ABOVE, BUT WITH STRATA DEFINED BY INTERNAL CUT-OFFS
cbtempunc <- crossbasis(data$temperature,lag=c(0,7),
argvar=list(fun="strata",breaks=cutoffs[2:10]),
arglag=list(fun="integer"))
####################################
# CONSTRAINED (LAG-STRATIFIED) DLM
####################################
# PRODUCE A DIFFERENT CROSS-BASIS FOR OZONE
# USE STRATA FOR LAG STRUCTURE, WITH CUT-OFFS DEFINING RIGHT-OPEN INTERVALS
cbo3constr <- crossbasis(data$ozone,lag=c(0,7),argvar=list(fun="lin"),
arglag=list(fun="strata",breaks=c(1,3)))
summary(cbo3constr)
# RUN THE MODEL AND OBTAIN PREDICTIONS FOR OZONE LEVEL 10ug/m3
data$y_lag <- NA
data$y_lag  <-  lag(data$numdeaths)
model8 <- glm(numdeaths ~ cbo3constr + cbtempunc + fourier + date + y_lag,data,family=quasipoisson)
pred8 <- crosspred(cbo3constr,model8,at=10)
# ESTIMATED EFFECTS AT EACH LAG
tablag3 <- with(pred8,t(rbind(matRRfit,matRRlow,matRRhigh)))
colnames(tablag3) <- c("RR","ci.low","ci.hi")
tablag3
# OVERALL CUMULATIVE (NET) EFFECT
pred8$allRRfit ; pred8$allRRlow ; pred8$allRRhigh
#############
# FIGURE 4C
#############
plot(pred8,var=10,type="p",ci="bars",col=1,pch=19,ylim=c(0.99,1.03),
main="All lag terms modelled together (with costraints)",xlab="Lag (days)",
ylab="RR and 95%CI per 10ug/m3 ozone increase")
acf(residuals(model8), na.action = na.omit)
acf(residuals(model4))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(2,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
?summary
ci.lin(model4,subset="ozone10",Exp=T)
ci.lin(model4,subset="ozone10",Exp=T)
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
ci.lin(model4,subset="ozone10",Exp=T)
Rate Ratio, rate of death (# number of person-time) in response to one unit increase of ozone
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(2,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(3,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
par(oldpar)
layout(1)
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$temperature,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="relative humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
################################################################################
# ESTIMATING OZONE-MORTALITY ASSOCIATION
# (CONTROLLING FOR CONFOUNDERS)
############################################
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
# UNADJUSTED MODEL, only including Ozone
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# First install the package - !! Once installed, remove the installation commande below or comment out by #, as there is no need to install the same lib again and again, all it takes is to use library() command to load installed library.
#install.packages("foreign")
#install.packages("dlnm")
#install.packages("tsModel")
#install.packages("Epi")
#install.packages("tidyverse")
# laod the package installed - this is needed for n
library(foreign)
library(tidyverse)
library(dlnm)
library(Epi)
library(tsModel)
# Get file directly from web URL,
data <- read.dta("https://github.com/gasparrini/2013_bhaskaran_IJE_codedata/raw/master/londondataset2002_2006.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# INSPECT THE DATA
# Display data, only first 5 lines
head(data, 5)
# Data structure
str(data)
# SUMMARY
summary(data)
# CORRELATIONS across each variables
cor(data[,2:4])
# plot correlation - takes bit of time of see this plot
pairs(data, main = "Pairwise correlation of varaibles")
################################################################################
# PRELIMINARY ANALYSIS
#######################
#############
# FIGURE 1
#############
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
# this allow making two pltos in one window
par(mar=c(2, 2, 2, 2), mex=0.8, mfrow=c(2,1))  # Sets smaller margins
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(4,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,main="Daily deaths over time",
ylab="Daily number of deaths", xlab = "week")
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
## add year line vertical
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=1)
# Temperature
plot(data$date,data$temperature,main="Temperature",
ylab="Daily temp",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
# Humidity
plot(data$date,data$relative_humidity,main="relative humidity",
ylab="Daily humidity",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6))
### Plot to decompose time-series
tsData <- ts(data$numdeaths, frequency = 365)
tsDataDecomposed <- decompose(tsData)
plot(tsDataDecomposed)
#################
# SCALE EXPOSURE
#################
summary(data$ozone)
data$ozone10 <- data$ozone/10
summary(data$ozone10) # double check scaled or not , new variable ozone10
